printf("isalpha returned: %d\n", ft_isalpha((unsigned char) 'A'));
printf("isdigit returned: %d\n", ft_isdigit('6'));
printf("alnum returned: %d\n", ft_isalnum('h'));
printf("isascii returned: %d\n", ft_isascii(';'));
printf("isprint returned: %d\n", ft_isprint('a'));
printf("toupper returned: %c\n", ft_toupper('b'));
char s[] = "nigga";
printf("strchr returned: %s\n", ft_strchr(s, 'g'));
printf("strrchr returned: %s\n", ft_strrchr(s, 'l'));
printf("strlen returned: %zu\n", ft_strlen("hello world!"));
printf("strncmp returned: %i\n", ft_strncmp("hello worjd!", "hello world!", 11));
printf("memchr returned: %c\n", *(char *)ft_memchr(s, 'g', sizeof(char) * 5));
ft_bzero(s, 5);
printf("bzero returned: %s\n", s);
printf("memset returned: %s\n", (char *)ft_memset(s, 'j', sizeof(char) * 5));
//printf("strnstr returned: %s\n", strnstr("nigga wat u talking about?", "wat", 20));
char str[] = "what up everybody";
printf("memcmp returned: %d\n", ft_memcmp("abcd", "abce", 3));
printf("memmove returned: %s\n", ft_memmove(&str[9], &str[8], 5));
printf("memcpy returned: %s\n", ft_memcpy(&str[9], &str[8], 5));
printf("the return is: %s\n", ft_strnstr("helloz","ello", 5));
printf("atoi returned: %d\n", ft_atoi("    \n -874td"));
char *str = (char *) ft_calloc(20, sizeof(char));
printf("the return is: %s\n", str);
printf("the return is: %s\n", ft_strdup("hello world!"));
printf("the return is: %s\n", ft_substr("hello guys how are you?", 6, 4));
printf("the result is: %s\n", ft_strjoin("hello ", "world!"));
printf("the return is: %d\n", in_set(' ', "hieveryone ")); // this one is A HELPER FUNCTION
printf("the return is: %s\n", ft_strtrim("AAAAAAAAAAjAAAAAAAA", "A"));
printf("the return is: %d\n", count_words("    hello    world       hahaha!       ", ' ', 0));
int k = 0;
char s[] = " hello everyone hiiiiii";
char **ptr = ft_split(s, ' ');
while(ptr[k])
{
    printf("str is: %s\n", ptr[k]);
    k++;
}

int main()
{
    printf("%s", ft_strtrim("10/hello10/world10", "10/"));
}


int main()
{
    printf("%s", ft_strtrim("10/hello10/world10", "10/"));
}




int main()
{
    int n = -123456789;
    printf("%s", ft_itoa(n));
}



char f(unsigned int i, char c)
{
	char str;
	str = c + i;
	return (str);
}
int main()
{
	char str1[] = "abc";
	char* str2;
	str2 = ft_strmapi(str1, *f);
	printf("%s\n", str2);
}





void f(unsigned int index, char *c) 
{
    *c = *c + index;
}
int main() 
{
    char str[] = "abc";
    ft_striteri(str, f);
    printf("%s", str);
}



int main() 
{
     t_list *list = NULL; 
    int i = 1;
    while(i<= 5)
    {
        t_list *new_node = ft_lstnew((void *)(long)i);
        if (new_node == NULL) 
            return 1;
        ft_lstadd_front(&list, new_node);
        i++;
    }
    int size = ft_lstsize(list);
    printf("Size of the list: %d\n", size);
    return 0;
}